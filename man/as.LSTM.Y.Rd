% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deepRNN.r
\name{as.LSTM.Y}
\alias{as.LSTM.Y}
\title{Outcomes (Y) data format for LSTM}
\usage{
as.LSTM.Y(Y, timesteps = 1L, reverse = FALSE)
}
\arguments{
\item{Y}{An outcome data set, usually a vector, matrix or data frame, returned by \code{get.LSTM.XY}.}

\item{timesteps}{Number of timesteps; stands for the number of different periods within one sample (record) of the result, the resampled outcome matrix \code{Y}.}

\item{reverse}{Controls the order of the values in the resampled outcome matrix \code{Y}. By default they are used in the given order (forward in time), but they can also be used in reverse order (backward in time).}
}
\value{
Dependent on the type of \code{Y} and timesteps. If \code{Y} is a factor, the result is a one-hot vector.
  If \code{timesteps = NULL|1} a 2D-array with the dimensions (1) samples as number of records and (2) number of output units, representing a scalar outcome \code{Y},
  if \code{timesteps >= 2} a 3D-array with the dimensions (1) samples, (2) timesteps and (3) number of output units, representing a sequence or multi-step outcome \code{Y}.
}
\description{
Outcomes (Y) data format for LSTM
}
\seealso{
\code{\link{get.LSTM.XY}}, \code{\link{as.LSTM.X}}, \code{\link{as.ANN.matrix}}, \code{\link{one_hot_encode}},
  \code{\link{as.tensor.2D}}, \code{\link{as.tensor.3D}}.

Other Recurrent Neural Network (RNN): 
\code{\link{as.LSTM.X}()},
\code{\link{as.LSTM.data.frame}()},
\code{\link{as.LSTM.period_outcome}()},
\code{\link{as.lag}()},
\code{\link{as.timesteps}()},
\code{\link{build.LSTM}()},
\code{\link{fit.LSTM}()},
\code{\link{get.LSTM.X.samples}()},
\code{\link{get.LSTM.X.timesteps}()},
\code{\link{get.LSTM.X.units}()},
\code{\link{get.LSTM.XY}()},
\code{\link{get.LSTM.Y.samples}()},
\code{\link{get.LSTM.Y.timesteps}()},
\code{\link{get.LSTM.Y.units}()},
\code{\link{get.period_shift}()},
\code{\link{load_weights.ANN}()},
\code{\link{predict.ANN}()},
\code{\link{save_weights.ANN}()},
\code{\link{start.invert_differencing}()}
}
\concept{Recurrent Neural Network (RNN)}
