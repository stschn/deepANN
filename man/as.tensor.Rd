% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deepMLP.r
\name{as.tensor}
\alias{as.tensor}
\title{Create a (reshaped) tensor (n-dimensional array)}
\usage{
as.tensor(
  data,
  dim = NULL,
  byrow = FALSE,
  numeric = TRUE,
  reverse = c(FALSE, 2)
)
}
\arguments{
\item{data}{A data set, e.g. vector, array, matrix, data frame, tibble, data.table.}

\item{dim}{The new dimensions to be set on the tensor.}

\item{byrow}{The order in which elements of data should be read during rearrangement.
\code{FALSE} (default) is equivalent to the \code{Fortran}-style ordering and means elements should be read in column-major order.
\code{TRUE} is equivalent to the \code{C}-style ordering and means elements should be read in row-major order.}

\item{numeric}{A logical value indicating whether the elements should be coerced as numeric elements.}

\item{reverse}{Controls the order of the elements in the (reshaped) tensor. By default they are used in the given order, but they can also be used in reverse order.
The second parameter value indicates a row-wise reverse order (\code{1}) or a column-wise reverse order (\code{2}).}
}
\value{
The (reshaped) \code{data} as a tensor.
}
\description{
Create a (reshaped) tensor (n-dimensional array)
}
\details{
The function \code{array_reshape} from reticulate package differs from the base function \code{dim}.
  While \code{dim} will fill new dimensions in column-major (Fortran-style) ordering, \code{array_reshape} allows both row-major (C-style) ordering and column-major (Fortran-style) ordering.
}
\seealso{
\code{\link{dim}}, \code{\link[reticulate]{array_reshape}}.

Other Single & Multi Layer Perceptron (SLP, MLP): 
\code{\link{as.ANN.matrix}()},
\code{\link{as.MLP.X}()},
\code{\link{as.MLP.Y}()},
\code{\link{as.tensor.1D}()},
\code{\link{as.tensor.2D}()},
\code{\link{as.tensor.3D}()},
\code{\link{build.MLP}()},
\code{\link{fit.MLP}()},
\code{\link{get.MLP.X.samples}()},
\code{\link{get.MLP.X.units}()},
\code{\link{get.MLP.Y.samples}()},
\code{\link{get.MLP.Y.units}()},
\code{\link{load_weights.ANN}()},
\code{\link{predict.ANN}()},
\code{\link{save_weights.ANN}()},
\code{\link{vector.as.ANN.matrix}()},
\code{\link{vector.as.numeric}()}
}
\concept{Single & Multi Layer Perceptron (SLP, MLP)}
