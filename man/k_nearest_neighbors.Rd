% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deepML.r
\name{k_nearest_neighbors}
\alias{k_nearest_neighbors}
\title{k-nearest neighbors}
\usage{
k_nearest_neighbors(X, y, test, k = 1L)
}
\arguments{
\item{X}{Matrix or data frame with feature values.}

\item{y}{A vector of categorical (label) or continuous (numeric) outcomes for \code{X}.}

\item{test}{Vector or matrix containing the test or query instances the response is to be determined.}

\item{k}{The number of nearest neighbors of feature samples chosen to extract the response.}
}
\value{
A named list with the response and a matrix with class-probability distributions where appropriate for \code{test}.
}
\description{
k-nearest neighbors
}
\details{
The response of k-nearest neighbors is either the majority class of k neighbors for a categorical outcome or the mean of k neighbors for a continuous outcome.
}
\examples{
  df <- data.frame(height = c(158, 158, 158, 160, 160, 163, 163, 160, 163, 165, 165, 165, 168, 168, 168, 170, 170),
                   weight = c(58, 59, 63, 59, 60, 60, 61, 64, 64, 61, 62, 65, 62, 63, 66, 63, 64),
                   size = c(rep("M", 6), rep("L", 11)),
                   cont = sample(20, 17))
  df$size <- as.factor(df$size)
  test <- setNames(c(161, 61), c("height", "weight")) # query instance
  test <- data.frame(height = c(161, 183, 161), weight = c(61, 77, 55)) # query data frame
  X <- df[, 1L:2L]
  y <- df$size # categorical outcome
  y <- df$cont # continuous outcome
  knn <- k_nearest_neighbors(X, y, test, k = 3L)
  knn$response
  knn$probability
}
\seealso{
\code{\link{distance}}.

Other Machine Learning: 
\code{\link{as.degree}()},
\code{\link{as.radian}()},
\code{\link{cross_validation_split}()},
\code{\link{distance}()},
\code{\link{erfcinv}()},
\code{\link{erfc}()},
\code{\link{erfinv}()},
\code{\link{erf}()},
\code{\link{moving_average}()},
\code{\link{naive_forecast}()},
\code{\link{predict.kmeans}()},
\code{\link{sd.pop}()},
\code{\link{similarity}()},
\code{\link{var.pop}()}
}
\concept{Machine Learning}
