% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deepCNN.r
\name{as_images_tensor}
\alias{as_images_tensor}
\title{Convert list of image arrays to a tensor}
\usage{
as_images_tensor(imagelist, height, width, depth = NULL, channels = 3L)
}
\arguments{
\item{imagelist}{A list of images returned by \code{as_images_array()}.}

\item{height}{The height of an image, equal to the number of rows.}

\item{width}{The width of an image, equal to the number of columns.}

\item{depth}{The depth of an 3D image. The default value \code{NULL} indicates 2D images.}

\item{channels}{The number of channels of an image. A color channel is a primary color (like red, green and blue),
equal to a color valence (denotes how light effects the color sensation of an eye or in common of the brain).
Primary colors can be mixed to produce any color.
A channel equal \code{1} indicates a grayscale image, \code{3} a color image.}
}
\value{
A tensor of corresponding shape depending on the type of images (2D or 3D images).
}
\description{
Convert list of image arrays to a tensor
}
\details{
The supported types of images are 2D and 3D images. The resulting tensor has the corresponding shapes:
\itemize{
\item 2D image: \code{samples} (number of images), \code{height}, \code{width} and \code{channels}.
\item 3D image: \code{samples} (number of images), \code{height}, \code{width}, \code{depth} and \code{channels}.
}
}
\examples{
  # Get image file names
  base_dir <- "c:/users/.../images" # any folder where image files are stored
  filelist <- list.files(path = base_dir, pattern = "\\\\.jpg$", full.names = T) # JPEG images
  # Image dimensions (2D images)
  height   <- 200L
  width    <- 200L
  channels <- 3L

  # with keras (no functions are specified)
  CNN_X <- images_load(filelist, h = height, w = width, ch = channels) \%>\%
    images_resize() \%>\%
    as_images_array() \%>\%
    as_images_tensor(height = height, width = width, channels = channels)

  # with magick
  magick_resize <- function(img, height, width) {
    magick::image_scale(img, magick::geometry_size_pixels(width = width, height = height, preserve_aspect = FALSE))
  }

  magick_array <- function(img, channels) {
    as.integer(magick::image_data(img, channels))
  }

  CNN_X <- images_load(filelist, FUN = magick::image_read) \%>\%
    images_resize(FUN = magick_resize, h = height, w = width) \%>\%
    as_images_array(FUN = magick_array, ch = "rgb") \%>\%
    as_images_tensor(height = height, width = width, channels = channels)
}
\seealso{
Other Convolutional Neural Network (CNN): 
\code{\link{alexnet}()},
\code{\link{as_CNN_image_X}()},
\code{\link{as_CNN_image_Y}()},
\code{\link{as_CNN_temp_X}()},
\code{\link{as_CNN_temp_Y}()},
\code{\link{as_images_array}()},
\code{\link{images_load}()},
\code{\link{images_resize}()},
\code{\link{inception_resnet_v2}()},
\code{\link{inception_v3}()},
\code{\link{lenet5}()},
\code{\link{mobilenet_v2}()},
\code{\link{mobilenet_v3}()},
\code{\link{mobilenet}()},
\code{\link{nasnet}()},
\code{\link{resnet}},
\code{\link{unet}()},
\code{\link{vgg}},
\code{\link{xception}()},
\code{\link{zfnet}()}
}
\concept{Convolutional Neural Network (CNN)}
