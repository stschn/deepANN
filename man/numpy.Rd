% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deepUtils.r
\name{numpy}
\alias{numpy}
\alias{as.numpy}
\alias{as.numpy.default}
\alias{is.numpy}
\title{Numpy}
\usage{
numpy(data, ...)

as.numpy(data, ...)

\method{as.numpy}{default}(
  data,
  dim = NULL,
  numeric = TRUE,
  reverse = FALSE,
  order = c("C", "F")
)

is.numpy(x)
}
\arguments{
\item{data}{Data to be reshaped to a numpy array.}

\item{...}{Additional arguments to be passed to or from methods.}

\item{dim}{The new dimensions to be set to \code{data}.}

\item{numeric}{A logical value indicating whether the elements should be coerced as numeric elements.}

\item{reverse}{Controls the order of the elements in the numpy array. By default they are used in the given order, but they can also be used in reverse order.}

\item{order}{The order in which elements of data should be read during rearrangement.
By default, the order is equivalent to the \code{C}-style ordering and means elements should be read in row-major order.
In opposite, the \code{Fortran}-style ordering means elements should be read in column-major order.}

\item{x}{An R object.}
}
\description{
\code{numpy(data, ...)} creates a reshaped numpy array known from Python.\cr
  \code{as.numpy(data, ...)} attempts to turn its argument into a numpy.\cr
  \code{is.numpy(x)} tests if its argument is a numpy.\cr
}
\details{
The function \code{array_reshape} from reticulate package differs from the base function \code{dim}.
  While \code{dim} will fill new dimensions in column-major (Fortran-style) ordering, \code{array_reshape} allows both row-major (C-style) ordering and column-major (Fortran-style) ordering.

  \code{numpy} creates a numpy array.

  \code{as.numpy} is a generic function. The default method will return a recreated numpy array.

  \code{is.numpy} returns \code{TRUE} or \code{FALSE} depending on whether its argument is a numpy array.
}
\examples{
  numpy(1:24, dim = c(8, 3)) # 2D array with row-major ordering
  numpy(1:24, dim = c(8, 3), order = "F") # 2D array with column-major ordering
  numpy(1:24, dim = c(4, 3, 2)) # 3D array with row-major ordering
  numpy(1:24, dim = c(4, 3, 2), order = "F") # 3D array with column-major ordering
}
\seealso{
\code{\link{dim}}, \code{\link[reticulate]{array_reshape}}.

Other Utils: 
\code{\link{as_ANN_matrix}()},
\code{\link{as_tensor_1D}()},
\code{\link{as_tensor_2D}()},
\code{\link{as_tensor_3D}()},
\code{\link{degree}()},
\code{\link{distance}()},
\code{\link{flatten}()},
\code{\link{nsamples}()},
\code{\link{nsubsequences}()},
\code{\link{ntimesteps}()},
\code{\link{nunits}()},
\code{\link{probability}()},
\code{\link{radian}()},
\code{\link{sd_pop}()},
\code{\link{similarity}()},
\code{\link{tensor}()},
\code{\link{var_pop}()},
\code{\link{vector_as_ANN_matrix}()},
\code{\link{vector_as_numeric}()}
}
\concept{Utils}
