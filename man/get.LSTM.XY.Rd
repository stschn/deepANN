% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deepRNN.r
\name{get.LSTM.XY}
\alias{get.LSTM.XY}
\title{Extract features (X) and outcome (Y) vector or matrix from data/time series in LSTM preformat}
\usage{
get.LSTM.XY(
  dataset,
  x = NULL,
  y = 2,
  other_columns = NULL,
  timesteps = 1,
  x.lag = 0,
  y_as_feature.type = c("none", "plain", "timesteps"),
  y_as_feature.lag = 0
)
}
\arguments{
\item{dataset}{A data set, usually a matrix or data frame.}

\item{x}{The column indices which spawn the feature matrix.}

\item{y}{The column indices of the outcomes.}

\item{other_columns}{The column indices of other columns which play an important role, e.g. a datetime column.}

\item{timesteps}{A number or vector of timesteps for \code{x} and \code{y}. A timestep denotes the number of different periods of the values within one sample.
A feature does always have at least one timestep, but an outcome is either a scalar with one implicit timestep or a sequence with at least two timesteps.
If only one value is given, this value is used for the resampled feature tensor produced by \code{as.LSTM.X}. In this case, \code{y} will
be treated as a scalar outcome. If two values are given, the first value is used as before and the second value is the number of timesteps for the resampled
sequence or multi-step outcome produced by \code{as.LSTM.Y}.}

\item{x.lag}{The considered lags on feature side. For a univariate time series at least a lag of 1 is needed.
For a multivariate time series no lag must be necessarily used. This argument can also be a vector of the same length as \code{x}.
In that case, each feature can have its own specified lag.}

\item{y_as_feature.type}{Indicates whether lagged outcomes are used as features in a multivariate time series.
\code{none} doesn't include lagged y-variables (default).
\code{plain} The lagged y-variables retrieve in the periods (timesteps) of the later resampled feature matrix thru \code{as.LSTM.X}.
  Therefore, only one lagged y-variable with a lag order of adjusted \code{y_as_feature.lag} is chosen.
\code{timesteps} The number of included lagged y-variables is equal to the value of the \code{timesteps} argument.}

\item{y_as_feature.lag}{The considered lag for lagged outcomes (\code{y}) as further features.}
}
\value{
A list with named elements
  \code{X}: A feature matrix in LSTM compatible preformat for usage with \code{as.LSTM.X}.
  \code{Y}: An outcome matrix in LSTM compatible preformat for usage with \code{as.LSTM.Y}.
  \code{other_columns}: A data frame of the selected \code{other_columns}.
}
\description{
\code{get.LSTM.XY} extracts features and outcomes from a data/time series in a LSTM compatible preformat.
  Within a univariate time series, y(t) is explained by past y(t-1), y(t-2) etc. Therefore the last sample of the
  feature set must be deleted, because there is no Y-value for it. Resampling of the Y-values must start at timesteps + 1.
  That is different to a multivariate time series. For y(t), the corresponding features at time t are already given.
  Resampling must start at timesteps.
}
\seealso{
\code{\link{as.LSTM.X}}, \code{\link{as.LSTM.Y}}.

Other Recurrent Neural Network (RNN), Long Short-Term Memory (LSTM): 
\code{\link{as.LSTM.X}()},
\code{\link{as.LSTM.Y}()},
\code{\link{as.LSTM.data.frame}()},
\code{\link{as.LSTM.period_outcome}()},
\code{\link{as.lag}()},
\code{\link{as.timesteps}()},
\code{\link{build.LSTM}()},
\code{\link{fit.LSTM}()},
\code{\link{get.LSTM.X.samples}()},
\code{\link{get.LSTM.X.timesteps}()},
\code{\link{get.LSTM.X.units}()},
\code{\link{get.LSTM.Y.samples}()},
\code{\link{get.LSTM.Y.timesteps}()},
\code{\link{get.LSTM.Y.units}()},
\code{\link{get.period_shift}()},
\code{\link{predict.LSTM}()},
\code{\link{start.invert_differencing}()}
}
\concept{Recurrent Neural Network (RNN), Long Short-Term Memory (LSTM)}
