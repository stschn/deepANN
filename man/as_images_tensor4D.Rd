% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deepCNN.r
\name{as_images_tensor4D}
\alias{as_images_tensor4D}
\title{Convert image arrays to 4D tensor}
\usage{
as_images_tensor4D(imagelist, height, width, channels = "rgb")
}
\arguments{
\item{imagelist}{A list of images returned by \code{as_images_array()}.}

\item{height}{The height of an image, equal to the number of rows.}

\item{width}{The width of an image, equal to the number of columns.}

\item{channels}{The number of channels of an image. A color channel is a primary color (like red, green and blue), 
equal to a color valence (denotes how light effects the color sensation of an eye or in common of the brain).
Primary colors can be mixed to produce any color. 
A channel equal \code{1} indicates a grayscale image, \code{3} a color image.}
}
\value{
A 4D array (tensor) with dimensions samples (number of images), height, width and channels.
}
\description{
Convert image arrays to 4D tensor
}
\examples{
  # Make pipe operator available
  '\%>\%' <- keras::'\%>\%'
  # Get file image names
  base_dir <- "c:/users/.../images" # any folder where image files are stored
  filelist <- list.files(path = base_dir, pattern = "\\\\.jpg$", full.names = T) # JPEG images
  # Image dimensions
  height   <- 200L
  width    <- 200L
  channels <- 3L
  
  # with keras (no functions are specified)
  CNN_X <- images_load(filelist, h = height, w = width, ch = channels) \%>\% 
    images_resize() \%>\% 
    as_images_array() \%>\% 
    as_images_tensor4D(height = height, width = width, channels = channels)
 
  # with magick
  magick_resize <- function(img, height, width) {
    magick::image_scale(img, magick::geometry_size_pixels(width = width, height = height, preserve_aspect = FALSE))
  }

  magick_array <- function(img, channels) {
    as.integer(magick::image_data(img, channels))
  }

  CNN_X <- images_load(filelist, FUN = magick::image_read) \%>\% 
    images_resize(FUN = magick_resize, h = height, w = width) \%>\% 
    as_images_array(FUN = magick_array, ch = "rgb") \%>\% 
    as_images_tensor4D(height = height, width = width, channels = channels)
}
\seealso{
Other Convolutional Neural Network (CNN): 
\code{\link{as.CNN.image.X}()},
\code{\link{as.CNN.image.Y}()},
\code{\link{as.CNN.temp.X}()},
\code{\link{as.CNN.temp.Y}()},
\code{\link{as_images_array}()},
\code{\link{get.CNN.image.X.channels}()},
\code{\link{get.CNN.image.X.height}()},
\code{\link{get.CNN.image.X.samples}()},
\code{\link{get.CNN.image.X.width}()},
\code{\link{get.CNN.image.Y.samples}()},
\code{\link{get.CNN.image.Y.units}()},
\code{\link{get.CNN.temp.X.samples}()},
\code{\link{get.CNN.temp.X.subsequences}()},
\code{\link{get.CNN.temp.X.timesteps}()},
\code{\link{get.CNN.temp.X.units}()},
\code{\link{get.CNN.temp.Y.samples}()},
\code{\link{get.CNN.temp.Y.timesteps}()},
\code{\link{get.CNN.temp.Y.units}()},
\code{\link{images_load}()},
\code{\link{images_resize}()}
}
\concept{Convolutional Neural Network (CNN)}
