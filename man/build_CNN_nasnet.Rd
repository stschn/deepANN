% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deepCNN.r
\name{build_CNN_nasnet}
\alias{build_CNN_nasnet}
\title{Build NASNet-A}
\usage{
build_CNN_nasnet(
  input_shape,
  classes,
  activation = "softmax",
  penultimate_filters = 4032,
  num_blocks = 6,
  stem_block_filters = 96,
  skip_reduction = TRUE,
  filter_multiplier = 2,
  loss = "categorical_crossentropy",
  optimizer = "sgd",
  metrics = c("accuracy")
)
}
\arguments{
\item{input_shape}{Dimensionality of the input not including the samples axis.}

\item{classes}{Number of classes or labels the outcome consists of.}

\item{activation}{Activation function for the output layer.}

\item{penultimate_filters}{Number of filters in the penultimate layer.}

\item{num_blocks}{Number of repeated blocks of the NASNet model.}

\item{stem_block_filters}{Number of filters in the initial stem block.}

\item{skip_reduction}{Whether to skip the reduction step at the tail end of the network.}

\item{filter_multiplier}{Controls the width of the network.
\itemize{
\item if \code{filter_multiplier < 1.0}, proportionally decreases the number of filters in each layer.
\item if \code{filter_multiplier > 1.0}, proportionally increases the number of filters in each layer.
\item if \code{filter_multiplier = 1.0}, default number of filters from the paper are used at each layer.
}}

\item{loss}{Name of objective function or objective function. If the model has multiple outputs, different loss on each output can be used by passing a dictionary or a list of objectives.
The loss value that will be minimized by the model will then be the sum of all individual losses.}

\item{optimizer}{Name of optimizer or optimizer instance.}

\item{metrics}{Vector or list of metrics to be evaluated by the model during training and testing.}
}
\value{
A CNN model object from type NASNet-A.
}
\description{

}
\details{
The \code{input shape} is usually \code{c(height, width, channels)} for a 2D image. \cr
The number of \code{classes} can be computed in three steps. First, build a factor of the labels (classes). Second, use \code{\link{as_CNN_image_Y}} to
one-hot encode the outcome created in the first step. Third, use \code{\link{nunits}} to get the number of classes. The result is equal to \code{\link{nlevels}} used on the result of the first step.

For a n-ary classification problem with single-label associations, the output is either one-hot encoded with categorical_crossentropy loss function or binary encoded (0,1) with sparse_categorical_crossentropy loss function. In both cases, the output activation function is softmax. \cr
For a n-ary classification problem with multi-label associations, the output is one-hot encoded with sigmoid activation function and binary_crossentropy loss function.

NASNet models use the notation \code{NASNet (N @ P)} where \code{N} is the number of blocks and \code{P} is the number of penultimate filters.

The current parameter defaults are the values for the \strong{large NASNet model type}. The parameter values for the the \strong{mobile NASNet model type} are: \cr
\code{penultimate_filters = 1056} \cr
\code{num_blocks = 4} \cr
\code{stem_block_filters = 32} \cr
\code{skip_reduction = FALSE}
}
\references{
Zoph, B., Vasudevan, V., Shlens, J., Le, Q. V. (2017). Learning Transferable Architectures for Scalable Image Recognition. arXiv:1707.07012 \link{cs}. https://arxiv.org/abs/1707.07012. \cr
\url{https://arxiv.org/pdf/1707.07012.pdf} \cr

see also \url{https://github.com/keras-team/keras-applications/blob/master/keras_applications/nasnet.py}
}
\seealso{
Other Convolutional Neural Network (CNN): 
\code{\link{as_CNN_image_X}()},
\code{\link{as_CNN_image_Y}()},
\code{\link{as_CNN_temp_X}()},
\code{\link{as_CNN_temp_Y}()},
\code{\link{as_images_array}()},
\code{\link{as_images_tensor}()},
\code{\link{build_CNN_alexnet}()},
\code{\link{build_CNN_inception_resnet_v2}()},
\code{\link{build_CNN_inception_v3}()},
\code{\link{build_CNN_lenet5}()},
\code{\link{build_CNN_mobilenet_v2}()},
\code{\link{build_CNN_mobilenet_v3}()},
\code{\link{build_CNN_mobilenet}()},
\code{\link{build_CNN_resnet50}()},
\code{\link{build_CNN_vgg16}()},
\code{\link{build_CNN_vgg19}()},
\code{\link{build_CNN_xception}()},
\code{\link{build_CNN_zfnet}()},
\code{\link{images_load}()},
\code{\link{images_resize}()}
}
\concept{Convolutional Neural Network (CNN)}
