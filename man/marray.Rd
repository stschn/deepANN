% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deepUtils.r
\name{marray}
\alias{marray}
\alias{as.marray}
\alias{as.marray.default}
\alias{is.marray}
\title{Multidimensional Array (marray)}
\usage{
marray(data, ...)

as.marray(data, ...)

\method{as.marray}{default}(
  data,
  dim = NULL,
  dimnames = NULL,
  order = c("C", "F"),
  numeric = FALSE,
  reverse = FALSE
)

is.marray(x)
}
\arguments{
\item{data}{Data to be reshaped to a multidimensional array.}

\item{...}{Additional arguments to be passed to or from methods.}

\item{dim}{The dimensions for the created array. If \code{dim} is not defined (default) and \code{data} already has dimensions, these will be applied.}

\item{dimnames}{Either \code{NULL} or the names of the dimensions. This must be a list with one component for each dimension, either \code{NULL} or a character vector of the length given by \code{dim} for that dimension.}

\item{order}{The order in which elements of data should be read during rearrangement.
By default, the order is equivalent to the \code{C}-style ordering and means elements should be read in row-major order.
In opposite, the \code{Fortran}-style ordering means elements should be read in column-major order.}

\item{numeric}{A logical value indicating whether the elements should be coerced as numeric elements.}

\item{reverse}{Controls the order of the elements in the \code{marray}. By default, they are used in the given order, but they can also be used in reverse order.}

\item{x}{An R object.}
}
\value{
An array from type \code{marray}.
}
\description{
\code{marray(data, ...)} creates a reshaped multidimensional array.\cr
  \code{as.marray(data, ...)} attempts to turn its argument into a \code{marray}.\cr
  \code{is.marray(x)} tests if its argument is a \code{marray}.\cr
}
\details{
This introduced multidimensional array, read m-array, defines an array as several bunches of matrices.
  Usually, an R array with more than two dimensions can be interpret as a bunch of bunch of bunch... of matrices.
  The first two dimensions define the matrix while the remaining dimensions define the corresponding bunches.
  For e.g., an 4x3x2 array has 2 bunches of each 4x3 matrix. An 6x4x3x2 array has 2 bunches, each of these two bunches has 3 bunches and each of these three bunches again contains a 6x4 matrix.

  The behavior of \code{marray} is quite similar to that of numpy from Python. While column-major ordering is identically,
  row-major ordering differs. An array from type \code{marray} always order data within the matrices, and not along the remaining axis.

  In this context, the function \code{array_reshape} from reticulate package, which is consistent with libraries like NumPy, differs from the base function \code{dim}.
  While \code{dim} will fill new dimensions in column-major (Fortran-style) ordering, \code{array_reshape} allows both row-major (C-style) ordering and column-major (Fortran-style) ordering.
}
\examples{
  # Vector input with explicit dimensions
  marray(1:24, dim = c(8, 3)) # 2D array with row-major ordering
  marray(1:24, dim = c(8, 3), order = "F") # 2D array with column-major ordering
  marray(1:24, dim = c(4, 3, 2)) # 3D array with row-major ordering
  marray(1:24, dim = c(4, 3, 2), order = "F") # 3D array with column-major ordering

  # Different input types and applying the dimensions
  v <- (1:24)
  l <- list(x1 = 1:10, x2 = seq(10, 100, 10))
  df <- data.frame(x1 = 1:6, x2 = seq(10, 60, 10), x3 = sample(letters, 6))
  m <- matrix(1:24, nrow = 6)
  a1 <- array(letters[1L:24L])
  a3 <- array(v, dim = c(4, 3, 2))
  a4 <- array(1:48, dim = c(4, 3, 2, 2))
  data <- a3; data
  a <- marray(data, order = "F", reverse = F); a
}
\references{
\url{https://rstudio.github.io/reticulate/articles/arrays.html}.
}
\seealso{
\code{\link{array}}, \code{\link{dim}}.

Other Utils: 
\code{\link{as_ANN_matrix}()},
\code{\link{as_tensor_1D}()},
\code{\link{as_tensor_2D}()},
\code{\link{as_tensor_3D}()},
\code{\link{degree}()},
\code{\link{distance}()},
\code{\link{flatten}()},
\code{\link{insert}()},
\code{\link{list_as_numeric}()},
\code{\link{mbind}()},
\code{\link{ndim}()},
\code{\link{nsamples}()},
\code{\link{nsubsequences}()},
\code{\link{ntimesteps}()},
\code{\link{nunits}()},
\code{\link{probability}()},
\code{\link{radian}()},
\code{\link{random_seed}()},
\code{\link{re.factor}()},
\code{\link{sd_pop}()},
\code{\link{similarity}()},
\code{\link{slice}()},
\code{\link{ta}()},
\code{\link{tensor}()},
\code{\link{var_pop}()},
\code{\link{vector_as_ANN_matrix}()},
\code{\link{vector_as_numeric}()}
}
\concept{Utils}
