% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deepArray.r
\name{marray}
\alias{marray}
\alias{as.marray}
\alias{as.marray.default}
\alias{as.marray.data.frame}
\alias{as.marray.list}
\alias{is.marray}
\title{Multidimensional array}
\usage{
marray(data, ...)

as.marray(data, ...)

\method{as.marray}{default}(
  data,
  dim = NULL,
  dimnames = NULL,
  order = c("C", "F"),
  numeric = FALSE,
  reverse = FALSE
)

\method{as.marray}{data.frame}(
  data,
  dim = NULL,
  dimnames = NULL,
  order = c("C", "F"),
  numeric = FALSE,
  reverse = FALSE
)

\method{as.marray}{list}(
  data,
  dim = NULL,
  dimnames = NULL,
  order = c("C", "F"),
  numeric = FALSE,
  reverse = FALSE
)

is.marray(x)
}
\arguments{
\item{data}{The data to be reshaped to a multidimensional array.}

\item{...}{Additional arguments to be passed to or from methods.}

\item{dim}{The dimensions for the created array. If \code{dim} is not defined (default) and \code{data} already has dimensions, these will be applied.}

\item{dimnames}{Either \code{NULL} or the names of the dimensions. This must be a list with one component for each dimension, either \code{NULL} or a character vector of the length given by \code{dim} for that dimension.}

\item{order}{The order in which elements of data should be read during rearrangement.
By default, the order is equivalent to the \code{C}-style ordering and means elements should be read in row-major order.
In opposite, the \code{Fortran}-style ordering means elements should be read in column-major order.}

\item{numeric}{A logical value indicating whether the elements should be coerced as numeric elements.}

\item{reverse}{Controls the order of the elements in the \code{marray}. By default, they are used in the given order, but they can also be used in reverse order.}

\item{x}{An R object.}
}
\value{
An array from type \code{marray}.
}
\description{
\code{marray(data, ...)} creates a reshaped multidimensional array.\cr
  \code{as.marray(data, ...)} attempts to turn its argument into a \code{marray}.\cr
  \code{is.marray(x)} tests if its argument is a \code{marray}.\cr
}
\details{
This introduced n-dimensional array is an equivalent to \code{ndarray} class from NumPy (\url{https://numpy.org/}), a famous package in Python.
  Usually, an n-dimensional array is a multidimensional container consisting of bunches of bunches of bunches... of matrices.
  The first two dimensions define the matrix while the remaining dimensions define the corresponding bunches. For e.g., an 4x3x2 array has 2 bunches of each 4x3 matrix.
  An 6x4x3x2 array has 2 bunches, each of these two bunches has 3 bunches and each of these three bunches again contains a 6x4 matrix.

  The behavior of \code{marray} is similar to that of ndarray from NumPy. R follows a column-major ordering (Fortran-style) during building up an array,
  wile Python respectively NumPy prefers row-major ordering (C-style) but offers both. For a comparison see \url{https://rstudio.github.io/reticulate/articles/arrays.html}.
}
\examples{
# Vector input with explicit dimensions
marray(1:24, dim = c(8, 3)) # 2D array with row-major ordering
marray(1:24, dim = c(8, 3), order = "F") # 2D array with column-major ordering
marray(1:24, dim = c(4, 3, 2)) # 3D array with row-major ordering
marray(1:24, dim = c(4, 3, 2), order = "F") # 3D array with column-major ordering

# Different input types and applying the dimensions
v <- (1:24)
l <- list(x1 = 1:10, x2 = seq(10, 100, 10))
df <- data.frame(x1 = 1:6, x2 = seq(10, 60, 10), x3 = sample(letters, 6))
m <- matrix(1:24, nrow = 6)
a1 <- array(letters[1L:24L])
a3 <- array(v, dim = c(4, 3, 2))
a4 <- array(1:48, dim = c(4, 3, 2, 2))
data <- a3; data
a <- marray(data, order = "F", reverse = F); a
}
\seealso{
\code{\link{array}}, \code{\link{dim}}, \code{\link[reticulate]{array_reshape}}.

Other Array: 
\code{\link{DIM}()},
\code{\link{column_stack}()},
\code{\link{delete}()},
\code{\link{dimC<-}()},
\code{\link{empty}()},
\code{\link{expand_dims}()},
\code{\link{eye}()},
\code{\link{flatten}()},
\code{\link{flip}()},
\code{\link{full}()},
\code{\link{insert}()},
\code{\link{mabind}()},
\code{\link{mamatrix}()},
\code{\link{ndim}()},
\code{\link{nsize}()},
\code{\link{ones}()},
\code{\link{reshape.array}()},
\code{\link{rot90}()},
\code{\link{row_stack}()},
\code{\link{slice}()},
\code{\link{squeeze}()},
\code{\link{transpose}()},
\code{\link{vander}()},
\code{\link{zeros}()}
}
\concept{Array}
