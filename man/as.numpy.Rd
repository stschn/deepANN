% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deepMLP.r
\name{as.numpy}
\alias{as.numpy}
\title{Create a reshaped numpy array known from Python}
\usage{
as.numpy(
  data,
  dim = NULL,
  numeric = TRUE,
  reverse = FALSE,
  order = c("C", "F")
)
}
\arguments{
\item{data}{Data to be reshaped to a numpy array.}

\item{dim}{The new dimensions to be set to \code{data}.}

\item{numeric}{A logical value indicating whether the elements should be coerced as numeric elements.}

\item{reverse}{Controls the order of the elements in the numpy array. By default they are used in the given order, but they can also be used in reverse order.}

\item{order}{The order in which elements of data should be read during rearrangement.
By default, the order is equivalent to the \code{C}-style ordering and means elements should be read in row-major order.
In opposite, the \code{Fortran}-style ordering means elements should be read in column-major order.}
}
\value{
The numpy array.
}
\description{
Create a reshaped numpy array known from Python
}
\details{
The function \code{array_reshape} from reticulate package differs from the base function \code{dim}.
  While \code{dim} will fill new dimensions in column-major (Fortran-style) ordering, \code{array_reshape} allows both row-major (C-style) ordering and column-major (Fortran-style) ordering.
}
\examples{
 as.numpy(1:24, dim = c(8, 3)) # 2D array with row-major ordering
 as.numpy(1:24, dim = c(8, 3), order = "F") # 2D array with column-major ordering
 as.numpy(1:24, dim = c(4, 3, 2)) # 3D array with row-major ordering
 as.numpy(1:24, dim = c(4, 3, 2), order = "F") # 3D array with column-major ordering
}
\seealso{
\code{\link{dim}}, \code{\link[reticulate]{array_reshape}}.

Other Single & Multi Layer Perceptron (SLP, MLP): 
\code{\link{as.ANN.matrix}()},
\code{\link{as.MLP.X}()},
\code{\link{as.MLP.Y}()},
\code{\link{as.tensor.1D}()},
\code{\link{as.tensor.2D}()},
\code{\link{as.tensor.3D}()},
\code{\link{as.tensor}()},
\code{\link{build.MLP}()},
\code{\link{fit.MLP}()},
\code{\link{flatten}()},
\code{\link{get.MLP.X.samples}()},
\code{\link{get.MLP.X.units}()},
\code{\link{get.MLP.Y.samples}()},
\code{\link{get.MLP.Y.units}()},
\code{\link{load_weights.ANN}()},
\code{\link{predict.ANN}()},
\code{\link{save_weights.ANN}()},
\code{\link{vector.as.ANN.matrix}()},
\code{\link{vector.as.numeric}()}
}
\concept{Single & Multi Layer Perceptron (SLP, MLP)}
